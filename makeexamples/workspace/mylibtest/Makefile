##  Sample makefile
##  M.K.Griffiths

##Simpler makefile

##  5/3/2004

## Variables can make makefiles much simpler


##  Note 
##  use of ## for comments
##  use of \  for line continuation


##  Target is name of file generated by a program 
##  in this case the make utility


## To use the makefile
## To build the executable type
## make
##
## To use makefile to delete executable and 
## object files type
## make clean
CC = g++
CLINKER = ${CC}
FLAGS = -ggdb -ansi -Wall -Wno-deprecated
LIBS =  -lm
LINKFLAGS = -ggdb 
VPATH = src:../include
INCLUDE = 
MYLIB = ../mylib/mylib.a

OBJ = mylibtest.o








## Here want to create an executable called
## target

## The rule for building the target folows immediately
## Can use CC, cc, f77, f95 to compile and link

## Note that the line follwoing the definition of the 
## target (the line defining the rule) must use tab chaacters and
## not white spaces

all : $(OBJ)
	$(CC) $(LIBS) $(FLAGS) $(LINKFLAGS) $(INCLUDE) -o mylibtest $(OBJ) $(MYLIB)


## Rules for building each object file
## Note dependencies such as C/C++ header files
## contained on the lines defining the rule
## for a particular object file
## Note use of -c flag source is compiled only

## vec.o : vec.c
##	CC -c vec.c $(flags)
## vecpair.o : vecpair.c
##	CC -c vecpair.c $(flags)
## mat.o : mat.c
##	CC -c mat.c $(flags)





## It is uneccessary to define commands for
## compiling individual source files make
## does this automatically
## make has a rule for updating a o file
## from a correspondingly name .cpp file
## in this case it uses the CC -c command




## Rule for compiling objects terminated with .cc second
## part is rule for output

.cc.o:
	$(CC) -c $(FLAGS) $(INCLUDE) $<


## Rule for removing executable and object files

clean :
	rm mylibtest $(OBJ)
