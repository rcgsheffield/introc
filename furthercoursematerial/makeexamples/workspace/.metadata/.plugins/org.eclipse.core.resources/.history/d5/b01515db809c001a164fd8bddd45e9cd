##  Sample makefile
##  M.K.Griffiths

##Simpler makefile

##  5/3/2004

## Variables can make makefiles much simpler


##  Note 
##  use of ## for comments
##  use of \  for line continuation


##  Target is name of file generated by a program 
##  in this case the make utility


## To use the makefile
## To build the executable type
## make
##
## To use makefile to delete executable and 
## object files type
## make clean


objects = linpackc.o

flags = -fast -xarch=v8plusb -xcache=64/32/4:8192/64/1 \
        -DSP -O3 -lm -xlic_lib=sunperf

## lib = ../lib/ex5_rtputils.a




## Here want to create an executable called
## target

## The rule for building the target folows immediately
## Can use CC, cc, f77, f95 to compile and link

## Note that the line follwoing the definition of the 
## target (the line defining the rule) must use tab chaacters and
## not white spaces

lp : $(objects)
	CC -o lp $(objects) $(flags)

## Rules for building each object file
## Note dependencies such as C/C++ header files
## contained on the lines defining the rule
## for a particular object file
## Note use of -c flag source is compiled only

## vecpair.o : vecpair.c
##	CC -c vecpair.c $(flags)
## mat.o : mat.c
##	CC -c mat.c $(flags)


## It is uneccessary to define commands for
## compiling individual source files make
## does this automatically
## make has a rule for updating a o file
## from a correspondingly name .cpp file
## in this case it uses the CC -c command


## Rule for compiling objects terminated with .cc second
## part is rule for output

.cc.o:
	CC -c $(flags) $<


## Rule for removing executable and object files

clean :
	rm lp $(objects)
